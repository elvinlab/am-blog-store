---
const { href, icon: iconClass, childrenArr, target, ...props } = Astro.props

const { pathname } = Astro.url
const hrefMath = href.split('/')
const pathnameMatch = pathname.split('/')
const isActive = hrefMath[1] === pathnameMatch[1]

type Child = {
  iconClass?: string
  target?: string
  href?: string | URL
  name: string
}
---
<div class="box relative h-10 w-auto flex items-center">
  <a href={href} target={target} class:list={[isActive ? 'header-link-active' : '', 'hover:header-link-hover']} {...props}>
    <i class={iconClass}/>
    <slot/>
    {
      childrenArr.length > 0 && <i class="ri-arrow-down-s-line"></i>
    }
  </a>
  {childrenArr && childrenArr.length > 0 && (
    <div class="dropdown cursor-pointer border rounded bg-skin-fill p-4">
      <ul class="space-y-4 w-28">
        {
          childrenArr.map((child: Child) =>
            <li class="text-center hover:text-skin-active select-none">
              <i class={child.iconClass}></i>
              <a target={child.target ? child.target : "_self"} href={child.href}>{child.name}</a>
            </li>
          )
        }
      </ul>
    </div>
  )}

</div>

<style>
  .dropdown {
    display: none;
    position: absolute;
    top: 100%;
    left: -40%;
  }

  .box:hover .dropdown {
    display: block;
  }

</style>

