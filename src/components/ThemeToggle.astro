---
const THEMES = ['Light', 'Dark', 'System']
---
<script>
  import domHelpers from '@helpers/domHelpers';

interface CustomDocument extends Document {
  startViewTransition?: (callback: () => void) => void;
}

const customDocument: CustomDocument = document;

let remove: (() => void) | null = null;
const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
const themesMenu = domHelpers.$('#themes-menu');

const getThemePreference = (): 'dark' | 'light' | 'system' => {
  if (typeof localStorage !== "undefined") {
    return (localStorage.getItem("theme") as 'dark' | 'light' | 'system') ?? 'system';
  }
  return window.matchMedia("(prefers-color-scheme: dark)").matches ? 'dark' : 'light';
};

const updateIcon = (themePreference: 'dark' | 'light' | 'system'): void => {
  domHelpers.$$('.theme-toggle-icon').forEach((element) => {
    element.style.scale = element.id === themePreference ? '1' : '0';
  });
};

const switchTheme = (): void => {
  if (remove) {
    remove();
  }

  matchMedia.addEventListener("change", switchTheme);
  remove = () => {
    matchMedia.removeEventListener("change", switchTheme);
  };

  const themePreference = getThemePreference();
  const isDark = themePreference === 'dark' || (themePreference === 'system' && matchMedia.matches);

  updateIcon(themePreference);
  document.documentElement.classList[isDark ? 'add' : 'remove']("dark");
};

const updateTheme = (): void => {


  if (customDocument.startViewTransition) {
    customDocument.startViewTransition(switchTheme);
  } else {
    switchTheme();
  }
};

updateTheme();

document.addEventListener("click", () => themesMenu?.classList.remove("open"));

domHelpers.$('#theme-toggle-btn')?.addEventListener("click", (e) => {
  e.stopPropagation();
  const isClosed = !themesMenu?.classList.contains("open");
  themesMenu?.classList[isClosed ? 'add' : 'remove']("open");
});

domHelpers.$$<HTMLElement>('.themes-menu-option').forEach((element) => {
  element.addEventListener("click", (e) => {
    const target = e.target as HTMLElement;
    localStorage.setItem("theme", target.innerText.toLowerCase().trim() as 'dark' | 'light');
    updateTheme();
  });
});

document.addEventListener('astro:after-swap', () => {
  updateTheme();
  window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
});

</script>

<div class="relative ml-1 mr-1">
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <i id="light" class="ri-sun-fill theme-toggle-icon text-xl transition-all"></i>
    <i id="dark" class="ri-moon-line theme-toggle-icon absolute text-xl transition-all"/>
    <i id="system" class="ri-computer-line theme-toggle-icon absolute text-xl transition-all"></i>

  </button>
  <div
    transition:persist
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>
